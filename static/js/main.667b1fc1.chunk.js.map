{"version":3,"sources":["stores/TodoModel.js","constants/FilterTypes.js","stores/TodoStore.js","components/ToDoEntry.js","components/ToDoItem.js","components/ToDoItems.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","id","title","completed","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","observable","FILTER_TYPES","NONE","ACTIVES","COMPLETED","todoStore","lastId","todos","push","filter","item","todo","action","ToDoEntry","state","value","event","keyCode","preventDefault","TodoStore","addTodo","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","handleKeyDown","type","placeholder","Component","ToDoItem","observer","props","toggle","_this","onToggle","vlaue","checked","onClick","removeTodo","class","ToDoItems","filterTodos","map","components_ToDoItem","key","ToDoFooter","length","changeFilter","href","removeCompleted","App","components_ToDoEntry","components_ToDoItems","TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.667b1fc1.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\n\r\nclass TodoModel {\r\n  store;\r\n  id;\r\n  @observable title;\r\n  @observable completed;\r\n\r\n  constructor(store, id, title, completed) {\r\n    this.store = store;\r\n    this.id = id;\r\n    this.title = title;\r\n    this.completed = completed;\r\n  }\r\n\r\n  toggle() {\r\n    this.completed = !this.completed;\r\n  }\r\n}\r\n\r\nexport default TodoModel\r\n","export const FILTER_TYPES = {\r\n    NONE : 0 ,\r\n    ACTIVES : 1,\r\n    COMPLETED : 2 \r\n}\r\n\r\nexport default FILTER_TYPES","import { observable, action } from \"mobx\";\r\nimport TodoModel from \"./TodoModel\";\r\nimport FILTER_TYPES from \"../constants/FilterTypes\";\r\n\r\nclass TodoStore {\r\n  @observable todos = [];\r\n  lastId = 0;\r\n  @observable filter = FILTER_TYPES.NONE;\r\n\r\n  @action\r\n  addTodo(title) {\r\n    this.todos.push(new TodoModel(this, this.lastId++, title, false));\r\n  }\r\n\r\n  @action\r\n  changeFilter(filter) {\r\n    this.filter = filter;\r\n  }\r\n\r\n  removeCompleted() {\r\n    this.todos = this.todos.filter((item) => !item.completed);\r\n  }\r\n\r\n  removeTodo(id) {\r\n    this.todos = this.todos.filter((todo) => todo.id !== id);\r\n  }\r\n\r\n  filterTodos() {\r\n    switch (this.filter) {\r\n      case FILTER_TYPES.NONE:\r\n        return this.todos;\r\n      case FILTER_TYPES.ACTIVES:\r\n        return this.todos.filter((todo) => !todo.completed);\r\n      case FILTER_TYPES.COMPLETED:\r\n        return this.todos.filter((todo) => todo.completed);\r\n      default:\r\n        return this.todos;\r\n    }\r\n  }\r\n}\r\nconst todoStore = new TodoStore();\r\nexport default todoStore;\r\n","import React, { Component } from \"react\";\r\nimport TodoStore from \"../stores/TodoStore\";\r\n\r\nclass ToDoEntry extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 13) {\r\n      event.preventDefault();\r\n      TodoStore.addTodo(this.state.value);\r\n      this.setState({\r\n        value: \"\"\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>Todo list</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={(event) => {\r\n            this.setState({ value: event.target.value });\r\n          }}\r\n          onKeyDown={(event) => this.handleKeyDown(event)}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"To Do Things\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoEntry;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass ToDoItem extends Component {\r\n  onToggle() {\r\n    this.props.todo.toggle();\r\n  }\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <li className={todo.completed ? \"completed\" : \"\"}>\r\n        <div className=\"view\">\r\n          <input\r\n            onChange={() => {\r\n              this.onToggle();\r\n            }}\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            vlaue=\"on\"\r\n            checked={todo.completed}\r\n          />\r\n          <label>{todo.title}</label>\r\n          <button\r\n            className=\"destroy\"\r\n            onClick={() => {\r\n              todoStore.removeTodo(todo.id);\r\n            }}\r\n          />\r\n        </div>\r\n        <input class=\"edit\" value=\"Create a TodoMVC template\" />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport todoStore from \"../stores/TodoStore\"\r\nimport {observer} from \"mobx-react\"\r\nimport FILTER_TYPES from \"../constants/FilterTypes\"\r\n\r\n@observer\r\nclass ToDoItems extends Component {\r\n  render() {\r\n    return (\r\n      <section className =\"main\">\r\n        <ul className=\"todo-list\">\r\n          {todoStore.filterTodos().map((todo) => {\r\n            return <ToDoItem todo={todo} key={todo.id} />;\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoItems;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport FILTER_TYPES from \"../constants/FilterTypes\";\r\n\r\n@observer\r\nclass ToDoFooter extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">\r\n          <strong>\r\n            {todoStore.todos.filter((item) => !item.completed).length}\r\n          </strong>{\" \"}\r\n          item left\r\n        </span>\r\n\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <a\r\n              onClick={() => {\r\n                todoStore.changeFilter(FILTER_TYPES.NONE);\r\n              }}\r\n              className={\r\n                todoStore.filter === FILTER_TYPES.NONE ? \"selected\" : \"\"\r\n              }\r\n              href=\"#/\"\r\n            >\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              onClick={() => {\r\n                todoStore.changeFilter(FILTER_TYPES.ACTIVES);\r\n              }}\r\n              className={\r\n                todoStore.filter === FILTER_TYPES.ACTIVES ? \"selected\" : \"\"\r\n              }\r\n              href=\"#/active\"\r\n            >\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              onClick={() => {\r\n                todoStore.changeFilter(FILTER_TYPES.COMPLETED);\r\n              }}\r\n              className={\r\n                todoStore.filter === FILTER_TYPES.COMPLETED ? \"selected\" : \"\"\r\n              }\r\n              href=\"#/completed\"\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <button\r\n          onClick={() => todoStore.removeCompleted()}\r\n          className=\"clear-completed\"\r\n        >\r\n          Clear completed\r\n        </button>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoFooter;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { observer } from \"mobx-react\";\nimport ToDoEntry from \"./components/ToDoEntry\";\nimport ToDoItems from \"./components/ToDoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\n\n@observer\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"todoapp\">\n        <ToDoEntry />\n        <ToDoItems />\n        <TodoFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}